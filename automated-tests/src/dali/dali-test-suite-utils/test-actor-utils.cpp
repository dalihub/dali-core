/*
 * Copyright (c) 2019 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// CLASS HEADER
#include "test-actor-utils.h"

// EXTERNAL INCLUDES
#include <dali/public-api/dali-core.h>
#include <dali/devel-api/images/texture-set-image.h>
#include <dali/devel-api/rendering/shader-devel.h>

// INTERNAL INCLUDES
#include "mesh-builder.h"

namespace Dali
{

namespace
{

std::vector<uint32_t> SHADER_BASIC_SHADER_FRAG = {
  0x07230203,0x00010000,0x00080001,0x00000019,0x00000000,0x00020011,0x00000001,0x0006000b,
  0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
  0x0008000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000011,0x00000015,
  0x00030010,0x00000004,0x00000007,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,
  0x6e69616d,0x00000000,0x00050005,0x00000009,0x4374756f,0x726f6c6f,0x00000000,0x00050005,
  0x0000000d,0x78655473,0x65727574,0x00000000,0x00050005,0x00000011,0x6f437675,0x7364726f,
  0x00000000,0x00050005,0x00000015,0x43697274,0x726f6c6f,0x00000000,0x00050005,0x00000018,
  0x78655473,0x65727574,0x00000032,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,
  0x0000000d,0x00000022,0x00000000,0x00040047,0x0000000d,0x00000021,0x00000004,0x00040047,
  0x00000011,0x0000001e,0x00000001,0x00040047,0x00000015,0x0000001e,0x00000000,0x00040047,
  0x00000018,0x00000022,0x00000000,0x00040047,0x00000018,0x00000021,0x00000002,0x00020013,
  0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,
  0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,
  0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,0x00000001,0x00000000,
  0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000000b,0x0000000a,0x00040020,
  0x0000000c,0x00000000,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000000,0x00040017,
  0x0000000f,0x00000006,0x00000002,0x00040020,0x00000010,0x00000001,0x0000000f,0x0004003b,
  0x00000010,0x00000011,0x00000001,0x00040020,0x00000014,0x00000001,0x00000007,0x0004003b,
  0x00000014,0x00000015,0x00000001,0x0004003b,0x0000000c,0x00000018,0x00000000,0x00050036,
  0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000b,
  0x0000000e,0x0000000d,0x0004003d,0x0000000f,0x00000012,0x00000011,0x00050057,0x00000007,
  0x00000013,0x0000000e,0x00000012,0x0004003d,0x00000007,0x00000016,0x00000015,0x00050085,
  0x00000007,0x00000017,0x00000013,0x00000016,0x0003003e,0x00000009,0x00000017,0x000100fd,
  0x00010038
};

std::vector<uint32_t> SHADER_BASIC_SHADER_VERT = {
  0x07230203,0x00010000,0x00080001,0x0000003b,0x00000000,0x00020011,0x00000001,0x0006000b,
  0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
  0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000001f,0x00000030,
  0x00000036,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,0x6e69616d,0x00000000,
  0x00060005,0x0000000b,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x0000000b,
  0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x0000000b,0x00000001,0x505f6c67,
  0x746e696f,0x657a6953,0x00000000,0x00070006,0x0000000b,0x00000002,0x435f6c67,0x4470696c,
  0x61747369,0x0065636e,0x00030005,0x0000000d,0x00000000,0x00050005,0x00000011,0x70696c63,
  0x66696e55,0x006d726f,0x00050006,0x00000011,0x00000000,0x70696c63,0x00000000,0x00030005,
  0x00000013,0x00000000,0x00040005,0x00000018,0x6c726f77,0x00000064,0x00040006,0x00000018,
  0x00000000,0x0070766d,0x00050006,0x00000018,0x00000001,0x6f6c6f63,0x00000072,0x00050006,
  0x00000018,0x00000002,0x657a6973,0x00000000,0x00030005,0x0000001a,0x00000000,0x00050005,
  0x0000001f,0x736f5061,0x6f697469,0x0000006e,0x00050005,0x00000030,0x6f437675,0x7364726f,
  0x00000000,0x00050005,0x00000036,0x43697274,0x726f6c6f,0x00000000,0x00050048,0x0000000b,
  0x00000000,0x0000000b,0x00000000,0x00050048,0x0000000b,0x00000001,0x0000000b,0x00000001,
  0x00050048,0x0000000b,0x00000002,0x0000000b,0x00000003,0x00030047,0x0000000b,0x00000002,
  0x00040048,0x00000011,0x00000000,0x00000005,0x00050048,0x00000011,0x00000000,0x00000023,
  0x00000000,0x00050048,0x00000011,0x00000000,0x00000007,0x00000010,0x00030047,0x00000011,
  0x00000002,0x00040047,0x00000013,0x00000022,0x00000000,0x00040047,0x00000013,0x00000021,
  0x00000001,0x00040048,0x00000018,0x00000000,0x00000005,0x00050048,0x00000018,0x00000000,
  0x00000023,0x00000000,0x00050048,0x00000018,0x00000000,0x00000007,0x00000010,0x00050048,
  0x00000018,0x00000001,0x00000023,0x00000040,0x00050048,0x00000018,0x00000002,0x00000023,
  0x00000050,0x00030047,0x00000018,0x00000002,0x00040047,0x0000001a,0x00000022,0x00000000,
  0x00040047,0x0000001a,0x00000021,0x00000000,0x00040047,0x0000001f,0x0000001e,0x00000000,
  0x00040047,0x00000030,0x0000001e,0x00000001,0x00040047,0x00000036,0x0000001e,0x00000000,
  0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
  0x00040017,0x00000007,0x00000006,0x00000004,0x00040015,0x00000008,0x00000020,0x00000000,
  0x0004002b,0x00000008,0x00000009,0x00000001,0x0004001c,0x0000000a,0x00000006,0x00000009,
  0x0005001e,0x0000000b,0x00000007,0x00000006,0x0000000a,0x00040020,0x0000000c,0x00000003,
  0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000003,0x00040015,0x0000000e,0x00000020,
  0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040018,0x00000010,0x00000007,
  0x00000004,0x0003001e,0x00000011,0x00000010,0x00040020,0x00000012,0x00000002,0x00000011,
  0x0004003b,0x00000012,0x00000013,0x00000002,0x00040020,0x00000014,0x00000002,0x00000010,
  0x00040017,0x00000017,0x00000006,0x00000003,0x0005001e,0x00000018,0x00000010,0x00000007,
  0x00000017,0x00040020,0x00000019,0x00000002,0x00000018,0x0004003b,0x00000019,0x0000001a,
  0x00000002,0x00040020,0x0000001e,0x00000001,0x00000017,0x0004003b,0x0000001e,0x0000001f,
  0x00000001,0x0004002b,0x0000000e,0x00000021,0x00000002,0x00040020,0x00000022,0x00000002,
  0x00000017,0x0004002b,0x00000006,0x00000026,0x3f800000,0x00040020,0x0000002c,0x00000003,
  0x00000007,0x00040017,0x0000002e,0x00000006,0x00000002,0x00040020,0x0000002f,0x00000003,
  0x0000002e,0x0004003b,0x0000002f,0x00000030,0x00000003,0x0004002b,0x00000006,0x00000033,
  0x3f000000,0x0005002c,0x0000002e,0x00000034,0x00000033,0x00000033,0x0004003b,0x0000002c,
  0x00000036,0x00000003,0x0004002b,0x0000000e,0x00000037,0x00000001,0x00040020,0x00000038,
  0x00000002,0x00000007,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
  0x00000005,0x00050041,0x00000014,0x00000015,0x00000013,0x0000000f,0x0004003d,0x00000010,
  0x00000016,0x00000015,0x00050041,0x00000014,0x0000001b,0x0000001a,0x0000000f,0x0004003d,
  0x00000010,0x0000001c,0x0000001b,0x00050092,0x00000010,0x0000001d,0x00000016,0x0000001c,
  0x0004003d,0x00000017,0x00000020,0x0000001f,0x00050041,0x00000022,0x00000023,0x0000001a,
  0x00000021,0x0004003d,0x00000017,0x00000024,0x00000023,0x00050085,0x00000017,0x00000025,
  0x00000020,0x00000024,0x00050051,0x00000006,0x00000027,0x00000025,0x00000000,0x00050051,
  0x00000006,0x00000028,0x00000025,0x00000001,0x00050051,0x00000006,0x00000029,0x00000025,
  0x00000002,0x00070050,0x00000007,0x0000002a,0x00000027,0x00000028,0x00000029,0x00000026,
  0x00050091,0x00000007,0x0000002b,0x0000001d,0x0000002a,0x00050041,0x0000002c,0x0000002d,
  0x0000000d,0x0000000f,0x0003003e,0x0000002d,0x0000002b,0x0004003d,0x00000017,0x00000031,
  0x0000001f,0x0007004f,0x0000002e,0x00000032,0x00000031,0x00000031,0x00000000,0x00000001,
  0x00050081,0x0000002e,0x00000035,0x00000032,0x00000034,0x0003003e,0x00000030,0x00000035,
  0x00050041,0x00000038,0x00000039,0x0000001a,0x00000037,0x0004003d,0x00000007,0x0000003a,
  0x00000039,0x0003003e,0x00000036,0x0000003a,0x000100fd,0x00010038
};

} // unnamed namespace

Actor CreateRenderableActor()
{
  return CreateRenderableActor( Image(), SHADER_BASIC_SHADER_VERT, SHADER_BASIC_SHADER_FRAG );
}

Actor CreateRenderableActor( Image texture )
{
  return CreateRenderableActor( texture, SHADER_BASIC_SHADER_VERT, SHADER_BASIC_SHADER_FRAG );
}

Actor CreateRenderableActor( TextureSet textures )
{
  return CreateRenderableActor( textures, SHADER_BASIC_SHADER_VERT, SHADER_BASIC_SHADER_FRAG );
}

Actor CreateRenderableActor( Image texture, std::vector<uint32_t>& vertexShader, std::vector<uint32_t>& fragmentShader )
{
  // If we a texture, then create a texture-set and add to renderer
  TextureSet textureSet = TextureSet::New();
  if( texture )
  {
    TextureSetImage( textureSet, 0u, texture );
  }

  return CreateRenderableActor( textureSet, vertexShader, fragmentShader );
}

Actor CreateRenderableActor( TextureSet textures, std::vector<uint32_t>& vertexShader, std::vector<uint32_t>& fragmentShader )
{
  // Create the geometry
  Geometry geometry = CreateQuadGeometry();

  // Create Shader
  Shader shader = DevelShader::New<uint32_t>( vertexShader, fragmentShader,
                                              DevelShader::ShaderLanguage::SPIRV_1_0,
                                              Property::Map(), Shader::Hint::NONE );

  // Create renderer from geometry and material
  Renderer renderer = Renderer::New( geometry, shader );

  // Create actor and set renderer
  Actor actor = Actor::New();
  actor.AddRenderer( renderer );

  renderer.SetTextures( textures );

  // Set actor to the size of the texture if set
  if( textures && textures.GetTextureCount() > 0 )
  {
    auto texture = textures.GetTexture( 0 );
    actor.SetSize( texture.GetWidth(), texture.GetHeight() );
  }
  else
  {
    actor.SetSize( 25, 25 );
  }

  return actor;
}



} // namespace Dali
